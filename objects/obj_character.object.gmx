<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_square</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

event_inherited(); // Run parent create event

// Sprites
spr_rest = sprite(spr_player_body_idle, 0.05);                          
spr_air = sprite(spr_player_body_jump, 0.5);
spr_move = sprite(spr_player_body_run, 0.15);
spr_duck = sprite(spr_player_body_duck, 0.2);

// Abilities
ent_enable_accel(0.1);
ent_enable_jump( BASE_GRAV * 25, spr_air );
ent_enable_duck( 2, spr_duck );
ent_enable_fly( spr_air );

// Props
hsp_base = 4;
hsp_max = 7;

// Flags



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input capture

input_right = keyboard_check( ord('D') ) || keyboard_check( vk_right );
input_left = keyboard_check( ord('A') ) || keyboard_check( vk_left );
input_up = keyboard_check( ord('W') ) || keyboard_check( vk_up );
input_down_start = keyboard_check_pressed( ord('S') ) || keyboard_check_pressed( vk_down );
input_down_stop = keyboard_check_released( ord('S') ) || keyboard_check_released( vk_down );

input_jump = keyboard_check_pressed(vk_space);

input_attack = mouse_check_button_pressed(mb_left);
input_dash = mouse_check_button_pressed(mb_right);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Motion

h_move_dir = -input_left + input_right; // Will be 1, 0 or -1

// Duck
if (input_down_start) {
    ent_duck();
} // Unduck
else if (input_down_stop)
    ent_unduck();

// Jump or Fly
if (input_jump) {
    if (can_fly)
        ent_fly();
    else
        ent_jump();
}
    
// Dash
// TODO: make this into an ability and not shitty
if (input_dash) {
    x = mouse_x;
    y = mouse_y;
}

ent_update_speed();
ent_handle_solid_collisions();



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug BBox and stuff

// DOESN'T FING WORK FUCK

/*

draw_set_alpha(0.3);
draw_rectangle_colour(
    bbox_left - x + view_wview[0], 
    bbox_top - y + view_hview[0],
    bbox_right - x + view_wview[0],
    bbox_bottom - y + view_hview[0],
    c_red, c_red, c_red, c_red, false);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>-1</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
