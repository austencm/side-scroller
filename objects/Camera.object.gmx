<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ZOOM AND SHIT, FUCK!!!!

// views
w = 1800;
h = 900;

view_wview[0] = w;
view_hview[0] = h;
view_wport[0] = w;
view_hport[0] = h;
surface_resize(application_surface, w, h);
display_reset(0, true);

// set zoom level of x1
// set zoom variable
zoomed = false;

// smooth camera twean factor (higher is slower)
TWEAN = 0.2;
draw = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera Movement

// fullscreen
if mouse_check_button_pressed(mb_left)
{
    if window_get_fullscreen()
    {
        window_set_fullscreen(false);
    }
    else
    {
        window_set_fullscreen(true);
    }
    surface_resize(application_surface, w, h);
    display_reset(0, true);
}

// zoom level
// if you want zoomed to x1...
if keyboard_check_pressed( ord('Z') ) &amp;&amp; zoomed {
    // set zoom level of x1
    view_wview[0] = view_wview[0] * 4;
    view_hview[0] = view_hview[0] * 4;
    zoomed = false;
    
} // else if you want zoomed to x2...
else if keyboard_check_pressed( ord('Z') ) &amp;&amp; !zoomed {
    // set zoom level of x2
    view_wview[0] = view_wview[0] / 4;
    view_hview[0] = view_hview[0] / 4;
    zoomed = true;
}
    





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///smooth camera movement

if instance_exists(obj_player1_body) {
    player = obj_player1_body;
    draw = true;
    
    x = lerp(x, player.x, TWEAN);
    y = lerp(y, player.y, TWEAN);
}

view_xview[0] = x - view_wview[0] / 2;
view_yview[0] = y - view_hview[0] / 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw debug info


draw_set_colour(c_white);
draw_set_font(font_debug);

// draw all debug text
if (draw) {

    debug_text = array(
        "FPS: " + string(fps),
        "X: " + string(player.x) + "  Y: " + string(player.y),
        "hsp: " + string(player.hsp) + "  vsp: " + string(player.vsp),
        "Zoom: " + string(zoomed + 1) + "x",
        "Fly: " + string(player.can_fly),
        "",
        "Left Click for Fullscreen",
        "Right Click to Teleport",
        "",
        "WASD or ARROWS to Move",
        "SPACE to Jump",
        "F to Fly",
        "",
        "R to Restart",
        "Z to Zoom",
        "P for Particles",
        "")
        
    for (var i = 0; i &lt; array_length_1d(debug_text); i++) {
        draw_text(10, i * 20 + 10, debug_text[i]);
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
