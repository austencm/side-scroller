<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_body_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

event_inherited() // Run parent create event

depth = 0

// Sprites
player_set_animation_speeds()

spr_rest = sprite(spr_player_body_idle, rest_speed)
spr_duck = sprite(spr_player_body_duck, duck_speed)
spr_move = sprite(spr_player_body_run, move_speed)
                          
spr_jump = sprite(spr_player_body_jump, jump_speed)
spr_fly = sprite(spr_player_body_jump, fly_speed)
spr_fall = sprite(spr_player_body_jump, fall_speed)

sprites_update()

// Props
hsp_base = 4.5
hsp_max = 8

// Abilities
ent_enable_accel(0.1)
ent_enable_duck( hsp_base, spr_duck )
ent_enable_jump( 12, spr_jump, 2 )
ent_enable_hop(.15)
ent_enable_fly( spr_fly )
ent_enable_attack(10, 20, 50)

// Flags




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggles init
can_fly = true;
emit = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PARTICLES

//CREATE EVENT

// system
global.P_System=part_system_create();

// particles
global.Particle1=part_type_create();
part_type_shape(global.Particle1,pt_shape_pixel);            //This defines the particles shape
part_type_size(global.Particle1,1,1,0,2);                    //This is for the size
part_type_scale(global.Particle1,1,1);                       //This is for scaling
part_type_color1(global.Particle1,c_white);                  //This sets its colour. There are three different codes for this
part_type_alpha1(global.Particle1,1);                        //This is its alpha. There are three different codes for this
part_type_speed(global.Particle1,0.50,2,-0.10,0);            //The particles speed
part_type_direction(global.Particle1,0,359,0,20);            //The direction
part_type_orientation(global.Particle1,0,0,0,0,1);           //This changes the rotation of the particle
part_type_blend(global.Particle1,1);                         //This is the blend mode, either additive or normal
part_type_life(global.Particle1,1,150);                       //this is its lifespan in steps

//Define and name the emitters
global.Particle1_Emitter1=part_emitter_create(global.P_System);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input capture

input_right = keyboard_check( ord('D') ) || keyboard_check( vk_right )
input_left = keyboard_check( ord('A') ) || keyboard_check( vk_left )
input_up = keyboard_check( ord('W') ) || keyboard_check( vk_up )
input_down = keyboard_check( ord('S') ) || keyboard_check( vk_down )

input_down_start = keyboard_check_pressed( ord('S') ) || keyboard_check_pressed( vk_down );
input_down_stop = keyboard_check_released( ord('S') ) || keyboard_check_released( vk_down );

input_jump = keyboard_check_pressed(vk_space);
input_jump_hold = keyboard_check(vk_space);

input_attack = mouse_check_button_pressed(mb_left);
input_dash = mouse_check_button_pressed(mb_middle);
input_use = mouse_check_button_pressed(mb_right);

// Cheats
if keyboard_check_pressed( ord('C') ) {
    can_fly = !can_fly
}

//Toggles
if keyboard_check_pressed( ord('P') )
    emit = !emit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Motion

h_move_dir = -input_left + input_right; // Will be 1, 0 or -1
v_move_dir = -input_up + input_down; // Will be 1, 0 or -1

// Duck
if (input_down_start) {
    ent_duck();
}
else if (input_down_stop)
    ent_unduck();

// Jump or Fly
if (input_jump) {
    //if can_jump
    //    y += (sprite_height / 10) 
        
    ent_jump();
} 
// Short-hop fast fall
if (!input_jump_hold) {
    ent_fall();
}

// Dash
// TODO: make this into an ability and not shitty
if (input_dash) {
    x = mouse_x;
    y = mouse_y;
}

event_inherited()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack

if input_attack
    ent_attack()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interaction

if (input_use) {
    if (equipped) {
        with (equipped)
            stk_detach()
            
        equipped = false
    }
    else if ( distance_to_object(obj_sticky) &lt; 50 ) {
        var nearest_item = instance_nearest(x, y, obj_sticky)
        
        with(nearest_item)
            stk_attach(obj_player1_OUT, -10, 18, -50, 1)
            
        equipped = nearest_item
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HOLY SH1T PARTICLZZZ!!!1!!!!
if emit
    part_particles_create(global.P_System, x, y, global.Particle1, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug BBox and stuff

// DOESN'T FING WORK FUCK

/*

draw_set_alpha(0.3);
draw_rectangle_colour(
    bbox_left - x + view_wview[0], 
    bbox_top - y + view_hview[0],
    bbox_right - x + view_wview[0],
    bbox_bottom - y + view_hview[0],
    c_red, c_red, c_red, c_red, false);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>-1</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
