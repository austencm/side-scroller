<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_rest_side</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables
grav = 0.4;
hsp = 0;
vsp = 0;
jumpspeed = 10;
movespeed_max = 7;
movespeed_min = 3.5;
movespeed_crouch = 2;
movespeed = 3.5;
jumping = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input Capture
// get player's input
key_right = keyboard_check(ord("D"));
key_left = keyboard_check(ord("A"));
key_up = keyboard_check(ord("W"));
key_down = keyboard_check(ord("S"));
key_jump = keyboard_check_pressed(vk_space);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

move_dir = -key_left + key_right;
// set horizontal speed
if (hsp == 0) movespeed = movespeed_min;
if (hsp != 0 &amp;&amp; movespeed &lt; movespeed_max) movespeed += .01;
if (key_down) movespeed = movespeed_crouch;

hsp = move_dir * movespeed;

// apply gravity
if (vsp &lt; 15) vsp += grav;

// jumping
if ( place_meeting(x, y + 1, obj_block) ) {
    if ( key_jump ) {
        vsp = key_jump * -jumpspeed;
    }
    jumping = key_jump;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle Solid Collisions

// horizontal collision
if (place_meeting(x + hsp, y, obj_block)) {   
    // auto step-up
    // is this obstruction only one block high? 
    if ( !place_meeting(x + hsp, y - global.BLOCK_HEIGHT, obj_block) ) {
        y -= global.BLOCK_HEIGHT;
    }
    else {
        // inch towards the obstruction until we're touching it
        while (!place_meeting(x + sign(hsp), y, obj_block)) {
            x += sign(hsp);
        }
        hsp = 0;
    }
}
x += hsp;

// vertical collision
if ( place_meeting(x, y + vsp, obj_block) ||
    ( !jumping &amp;&amp; place_meeting(x, y + global.BLOCK_HEIGHT, obj_block) ) ) {
     
    while (!place_meeting(x, y + sign(vsp), obj_block)) {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Sprite
if (move_dir != 0) image_xscale = move_dir;
if (place_meeting(x, y + 1, obj_block)) {
    if (move_dir != 0) {
        sprite_index = spr_player_run; 
        image_speed = .15;
    }
    else {
        sprite_index = spr_player_rest_side;
        image_speed = .07;
    }
    if (key_down != 0) {
        sprite_index = spr_player_crouch;
        image_speed = .07;
    }
}
else {
    sprite_index = spr_player_jump;
    image_speed = .2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>-1</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
