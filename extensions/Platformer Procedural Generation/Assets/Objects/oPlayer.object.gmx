<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>oParEntity</parentName>
  <maskName>sPlayerIdle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables

// Inherit oParEntity variables
event_inherited();

facing = 1;

// Movement ///////////////////////////////////////////////////////////////////

groundAccel = 1.00;
groundFric  = 2.00;
airAccel    = 0.75;
airFric     = 0.01;
vxMax       = 4.50;
vyMax       = 10.0;
jumpHeight  = 5.50;
gravNorm    = 0.50;
gravSlide   = 0.25; 

clingTime   = 2.0;

// Misc ///////////////////////////////////////////////////////////////////////

// States
IDLE     = 10;
RUN      = 11;
JUMP     = 12;

// Initialize properties
state  = IDLE;
facing = image_xscale; // Change xscale in editor to adjust initial facing

// For squash + stretch
xscale = 1;
yscale = 1;

///////////////////////////////////////////////////////////////////////////////

if (!instance_exists(oCamera))
    instance_create(x, y, oCamera);
    
// Initialize cam position  
view_xview[0] = x - view_wport[0] * 0.5;
view_yview[0] = y - view_hport[0] * 0.5 - 16;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// instance_create(0, 0, oFxRoomRestart);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sticking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var onGroundPrev = onGround;

event_inherited();

if (onGround &amp;&amp; !onGroundPrev) {
    for (var i = 0; i &lt; 4; ++i) {
        instance_create(x + random_range(-4, 4), bbox_bottom + random_range(-2, 2), oFxDust);
    }
    
    xscale = 1.33;
    yscale = 0.67;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

// Input //////////////////////////////////////////////////////////////////////

var kLeft, kRight, kUp, kDown, kJump, kJumpRelease, kAction, tempAccel, tempFric;

kLeft        = keyboard_check(vk_left)  || gamepad_axis_value(0, gp_axislh) &lt; -0.4;
kRight       = keyboard_check(vk_right) || gamepad_axis_value(0, gp_axislh) &gt;  0.4;
kUp          = keyboard_check(vk_up)    || gamepad_axis_value(0, gp_axislv) &lt; -0.4;
kDown        = keyboard_check(vk_down)  || gamepad_axis_value(0, gp_axislv) &gt;  0.4;

kJump        = keyboard_check_pressed(ord('Z'))  || gamepad_button_check_pressed(0, gp_face1);
kJumpRelease = keyboard_check_released(ord('Z')) || gamepad_button_check_released(0, gp_face1);

kAction      = keyboard_check_pressed(ord('X'))  || gamepad_button_check_pressed(0, gp_face3);

// Movement ///////////////////////////////////////////////////////////////////

// Apply the correct form of acceleration and friction
if (onGround) {  
    tempAccel = groundAccel;
    tempFric  = groundFric;
} else {
    tempAccel = airAccel;
    tempFric  = airFric;
}

// Reset wall cling
if ((!cRight &amp;&amp; !cLeft) || onGround) {
    canStick = true;
    sticking = false;
}   

// Cling to wall
if (((kRight &amp;&amp; cLeft) || (kLeft &amp;&amp; cRight)) &amp;&amp; canStick &amp;&amp; !onGround) {
    alarm[0] = clingTime;
    sticking = true; 
    canStick = false;       
}

// Handle gravity
if (!onGround) {
    if ((cLeft || cRight) &amp;&amp; vy &gt;= 0) {
        // Wall slide
        vy = Approach(vy, vyMax, gravSlide);
    } else {
        // Fall normally
        vy = Approach(vy, vyMax, gravNorm);
    }
}

// Left 
if (kLeft &amp;&amp; !kRight &amp;&amp; !sticking) {
    facing = -1;
    state  = RUN;
    
    // Apply acceleration left
    if (vx &gt; 0)
        vx = Approach(vx, 0, tempFric);   
    vx = Approach(vx, -vxMax, tempAccel);
// Right
} else if (kRight &amp;&amp; !kLeft &amp;&amp; !sticking) {
    facing = 1;
    state  = RUN;
    
    // Apply acceleration right
    if (vx &lt; 0)
        vx = Approach(vx, 0, tempFric);   
    vx = Approach(vx, vxMax, tempAccel);
}

// Friction
if (!kRight &amp;&amp; !kLeft) {
    vx    = Approach(vx, 0, tempFric);
    state = IDLE;
} 
       
// Wall jump
if (kJump &amp;&amp; cLeft &amp;&amp; !onGround) {
    yscale = 1.33;
    xscale = 0.67;
    
    for (var i = 0; i &lt; 4; ++i) {
        instance_create(bbox_left + random_range(-2, 2), y + random_range(-6, 6), oFxDust);
    }
            
    if (kLeft) {
        vy = -jumpHeight * 1.2;
        vx =  jumpHeight * .66;
    } else {
        vy = -jumpHeight * 1.1;
        vx =  vxMax; 
    }  
}

if (kJump &amp;&amp; cRight &amp;&amp; !onGround) {
    yscale = 1.33;
    xscale = 0.67;
    
    for (var i = 0; i &lt; 4; ++i) {
        instance_create(bbox_right + random_range(-2, 2), y + random_range(-6, 6), oFxDust);
    }    
    
    if (kRight) {
        vy = -jumpHeight * 1.2;
        vx = -jumpHeight * .66;
    } else {
        vy = -jumpHeight * 1.1;
        vx = -vxMax;
    }  
}
 
// Jump 
if (kJump) { 
    if (onGround) {
        // Fall thru platform
        //if (kDown) {
        //    if (place_meeting(x, y + 1, oParJumpThru))
        //        ++y;
        //} else {
            vy = -jumpHeight;
            
            for (var i = 0; i &lt; 4; ++i) {
                instance_create(x + random_range(-4, 4), bbox_bottom + random_range(-2, 2), oFxDust);
            }
            
            yscale = 1.33;
            xscale = 0.67;
        //}
    }
// Variable jumping
} else if (kJumpRelease) { 
    if (vy &lt; 0)
        vy *= 0.25;
}

// Jump state
if (!onGround)
    state = JUMP;
else if (random(100) &gt; 70)
    if (state == RUN)
        instance_create(x + random_range(-4, 4), bbox_bottom + random_range(-2, 2), oFxDust);

// Swap facing during wall slide
if (cRight &amp;&amp; !onGround)
    facing = -1;
else if (cLeft &amp;&amp; !onGround)
    facing = 1;
    
if (kAction) 
    with (instance_create(x + facing * 4, y, oBullet))
        vx = other.facing * 8;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Squash + stretch

xscale = Approach(xscale, 1, 0.05);
yscale = Approach(yscale, 1, 0.05);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lantern

with (instance_place(x, y, oRopeSegment))
    if (light || sprite_index == sVineSegment)
        physics_apply_impulse(phy_position_x, phy_position_y, other.vx * 8, other.vy * 8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw sprite depending on player state
switch (state) {
    case IDLE: 
        image_speed = 0.2;
        sprite_index = sPlayerIdle;
    break;
    
    case RUN: 
        image_speed = 0.8; 
        sprite_index = sPlayerRun;
    break;
    
    case JUMP:
        // Rise + fall
        sprite_index = sPlayerJump;  
         
        // When against a wall   
        if (cRight || cLeft)
            sprite_index = sPlayerSlide;  
    break;
}

// Draw player
if (onGround)
    draw_sprite_ext(sprite_index, image_index, x, y + (16 - 16 * yscale) * 0.25, facing * xscale, yscale, 0, c_white, image_alpha);    
else
    draw_sprite_ext(sprite_index, image_index, x, y, facing * xscale, yscale, 0, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,0</point>
    <point>32,32</point>
    <point>0,32</point>
  </PhysicsShapePoints>
</object>
